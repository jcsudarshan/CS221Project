from nltk.parse.projectivedependencyparser import *
from nltk.parse.dependencygraph import treebank_data

depStr = """
Pierre	NNP	2
Vinken	NNP	8
,	,	2
61	CD	5
years	NNS	6
old	JJ	2
,	,	2
will	MD	0
join	VB	8
the	DT	11
board	NN	9
as	IN	9
a	DT	15
nonexecutive	JJ	15
director	NN	12
Nov.	NNP	9
29	CD	16
.	.	8

Mr.	NNP	2
Vinken	NNP	3
is	VBZ	0
chairman	NN	3
of	IN	4
Elsevier	NNP	7
N.V.	NNP	12
,	,	12
the	DT	12
Dutch	NNP	12
publishing	VBG	12
group	NN	5
.	.	3

"""
graphs = [ DependencyGraph(entry) for entry in depStr.split('\n\n') if entry ]
# g = DependencyGrammar([
#     DependencyProduction('ate', ['breakfast', 'I']),
#     DependencyProduction('breakfast', ['small', 'a'])
# ])
print graphs[1].tree()
parser = ProbabilisticProjectiveDependencyParser()
parser.train(graphs)

for p in parser.parse('I ate a small breakfast'.split()):
    print p
